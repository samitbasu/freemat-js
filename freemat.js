/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Block: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(statements) {
              return {
              	     node: 'Block',
        	     statements: statements.filter(x => !(x instanceof Array && x.length == 0))
        	     }
        },
        function(state) {return state;},
        function(attr, name, supe, blocks) {return {node:'ClassDefinition',
                            attributes: (attr ? attr : []),
                            name: name,
                            sup: supe,
                            blocks: blocks};},
        function(list) {return list;},
        function(first, rest) {return buildList(first,rest,1);},
        function(id, init) {return {node: "Attribute", identifier: id, init: (init ? init[1] : [])};},
        function(sups) {return sups;},
        function(attr, props) {return {node: "PropertyBlock",
                attributes: (attr ? attr : []),
                properties: (props ? props : [])};},
        function(first, rest) {return [first].concat(rest);},
        function(id, init) {return {node: "Property", identifier: id, init: (init ? init[1] : [])};},
        function(attr, methods) {return {node: "MethodBlock",
                attributes: (attr ? attr : []),
                methods: (methods ? methods : [])};},
        function(attr, events) {return {node: "EventBlock",
                attributes: (attr ? attr : []),
                events: (events ? events : [])};},
        function(enums) {return {node: "EnumerationBlock",
                 enums: (enums ? enums : [])};},
        function(id, init) {return {node: "Enumeration",
                 name: id,
                 init: (init ? init[1] : [])};},
        function(expr, term) {return {node:'ExpressionStatement', expr: expr, term: term} },
        function(rets, name, args, body) {return {node:'FunctionDefinition',
        	returns: (rets ? rets : []),
        	name: name,
        	args: (args ? args : []),
        	body: body} },
        function() {return []},
        function(first, rest) {return buildList(first, rest, 1);},
        function() {return (amp ? amp[0] : '')+id},
        function() {return "~"},
        function(id) {return [id]},
        function() {return [];},
        function(id, first, rest) {return {node:'SpecialFunctionCall', func: id, args: buildList(first, rest, 1)}},
        function(first, rest, expr) {return {node:'MultiAssignmentStatement', lhs: buildList(first, rest, 1), expr: expr}},
        function(type, id) {return {node:'DeclarationStatement', type: type[0], identifiers: id}},
        function(lhs, expr) {return {node:'AssignmentStatement', lhs: lhs, expr: expr}},
        function(id, deref) {return {node:'VariableDereference', identifier: id, deref: deref}},
        function(id) {return {node:'FieldExpression', identifier: id}},
        function(expr) {return {node:'DynamicFieldExpression', expression: expr}},
        function(expr) {return {node:'ArrayIndexExpression', expression: expr}},
        function(expr) {return {node: 'CellIndexExpression', expression: expr}},
        function(expr, cases, otherwise) {
          return {node: 'SwitchStatement', cases: cases, expression: expr, otherwise: otherwise}
        },
        function(expr, body) {return {node: 'CaseStatement', expression: expr, body: body}},
        function(body) {return {node: 'OtherwiseStatement', body: body}},
        function(expr, body) {
          return {node: 'WhileStatement', expression: expr, body: body}
        },
        function(expr) { return {node: 'ThrowStatement', expression: expr} },
        function(body, cat) {return {node: 'TryStatement', body: body, cat: cat}},
        function(id, body) {return {node: 'CatchStatement', body: body, identifier: id}},
        function(expr, body, elif, els) {
          return {node: 'IfStatement', expression: expr, body: body, elifs: elif, els: els}
        },
        function(expr, body) {
          return {node: 'ElseIfStatement', expression: expr, body: body}
        },
        function(body) {
          return {node: 'ElseStatement', body: body}
        },
        function(expr, body) {
                     return {
                     node: 'ForStatement',
                     expression: expr,
                     body: body }
        },
        function(id, expr) {
           return {
             node: 'ForExpression',
             identifier: id,
             expression: expr
             }
            },
        function(expr) {return expr},
        function(first, rest) {return buildInfixExpr(first, rest, 1);},
        function(first, rest) {return buildInfixExpr(first, rest,1);},
        function(first, rest) {return buildInfixExpr(first,rest,1);},
        function(operator, operand) {return {node: 'PrefixExpression', operator: operator[1], operand: operand};},
        function(arg, operator) { /* Multiple postfixes? */
            return {node: 'PostfixExpression', operator: operator[0][0], operand: arg} },
        function(expr) {return expr;},
        function(expr) {return {node: 'MatrixDefinition', expression: expr} },
        function(expr) {return {node: 'CellDefinition', expression: expr} },
        function(first, rest) {return buildInfixExpr(first,rest,0);},
        function(literal) {return literal;},
        ".",
        peg$literalExpectation(".", false),
        /^[fFdD]/,
        peg$classExpectation(["f", "F", "d", "D"], false, false),
        /^[eE]/,
        peg$classExpectation(["e", "E"], false, false),
        /^[+\-]/,
        peg$classExpectation(["+", "-"], false, false),
        function(first, rest) {return first + rest; },
        "||",
        peg$literalExpectation("||", false),
        "&&",
        peg$literalExpectation("&&", false),
        "|",
        peg$literalExpectation("|", false),
        "&",
        peg$literalExpectation("&", false),
        "<=",
        peg$literalExpectation("<=", false),
        ">=",
        peg$literalExpectation(">=", false),
        "<",
        peg$literalExpectation("<", false),
        ">",
        peg$literalExpectation(">", false),
        "~=",
        peg$literalExpectation("~=", false),
        "+",
        peg$literalExpectation("+", false),
        "-",
        peg$literalExpectation("-", false),
        ".*",
        peg$literalExpectation(".*", false),
        "./",
        peg$literalExpectation("./", false),
        ".\\",
        peg$literalExpectation(".\\", false),
        "*",
        peg$literalExpectation("*", false),
        "/",
        peg$literalExpectation("/", false),
        "\\",
        peg$literalExpectation("\\", false),
        ".^",
        peg$literalExpectation(".^", false),
        "'",
        peg$literalExpectation("'", false),
        ".'",
        peg$literalExpectation(".'", false),
        "^",
        peg$literalExpectation("^", false),
        "==",
        peg$literalExpectation("==", false),
        /^[ ]/,
        peg$classExpectation([" "], false, false),
        /^[^ \t\n;]/,
        peg$classExpectation([" ", "\t", "\n", ";"], true, false),
        /^[a-z]/,
        peg$classExpectation([["a", "z"]], false, false),
        /^[A-Z]/,
        peg$classExpectation([["A", "Z"]], false, false),
        /^[_]/,
        peg$classExpectation(["_"], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        "break",
        peg$literalExpectation("break", false),
        "case",
        peg$literalExpectation("case", false),
        "catch",
        peg$literalExpectation("catch", false),
        "classdef",
        peg$literalExpectation("classdef", false),
        "continue",
        peg$literalExpectation("continue", false),
        "else",
        peg$literalExpectation("else", false),
        "elseif",
        peg$literalExpectation("elseif", false),
        "end",
        peg$literalExpectation("end", false),
        "for",
        peg$literalExpectation("for", false),
        "function",
        peg$literalExpectation("function", false),
        "global",
        peg$literalExpectation("global", false),
        "if",
        peg$literalExpectation("if", false),
        "keyboard",
        peg$literalExpectation("keyboard", false),
        "otherwise",
        peg$literalExpectation("otherwise", false),
        "persistent",
        peg$literalExpectation("persistent", false),
        "quit",
        peg$literalExpectation("quit", false),
        "retall",
        peg$literalExpectation("retall", false),
        "return",
        peg$literalExpectation("return", false),
        "switch",
        peg$literalExpectation("switch", false),
        "throw",
        peg$literalExpectation("throw", false),
        "try",
        peg$literalExpectation("try", false),
        "while",
        peg$literalExpectation("while", false),
        function() {return {node: 'IntegerLiteral', token: text() };},
        /^[']/,
        peg$classExpectation(["'"], false, false),
        function() { return {node: 'StringLiteral', escapedValue: text() }; },
        "'''",
        peg$literalExpectation("'''", false),
        ";",
        peg$literalExpectation(";", false),
        "EVENTS",
        peg$literalExpectation("EVENTS", false),
        "events",
        peg$literalExpectation("events", false),
        "METHODS",
        peg$literalExpectation("METHODS", false),
        "methods",
        peg$literalExpectation("methods", false),
        "ENUMERATION",
        peg$literalExpectation("ENUMERATION", false),
        "enumeration",
        peg$literalExpectation("enumeration", false),
        "PROPERTIES",
        peg$literalExpectation("PROPERTIES", false),
        "properties",
        peg$literalExpectation("properties", false),
        "CLASSDEF",
        peg$literalExpectation("CLASSDEF", false),
        "GLOBAL",
        peg$literalExpectation("GLOBAL", false),
        "PERSISTENT",
        peg$literalExpectation("PERSISTENT", false),
        /^[ \t]/,
        peg$classExpectation([" ", "\t"], false, false),
        /^[\r\n]/,
        peg$classExpectation(["\r", "\n"], false, false),
        "END",
        peg$literalExpectation("END", false),
        "BREAK",
        peg$literalExpectation("BREAK", false),
        "CONTINUE",
        peg$literalExpectation("CONTINUE", false),
        "SWITCH",
        peg$literalExpectation("SWITCH", false),
        "CASE",
        peg$literalExpectation("CASE", false),
        "OTHERWISE",
        peg$literalExpectation("OTHERWISE", false),
        "WHILE",
        peg$literalExpectation("WHILE", false),
        "RETURN",
        peg$literalExpectation("RETURN", false),
        "THROW",
        peg$literalExpectation("THROW", false),
        "TRY",
        peg$literalExpectation("TRY", false),
        "CATCH",
        peg$literalExpectation("CATCH", false),
        "FOR",
        peg$literalExpectation("FOR", false),
        "IF",
        peg$literalExpectation("IF", false),
        "ELSE",
        peg$literalExpectation("ELSE", false),
        "ELSEIF",
        peg$literalExpectation("ELSEIF", false),
        "(",
        peg$literalExpectation("(", false),
        ")",
        peg$literalExpectation(")", false),
        ",",
        peg$literalExpectation(",", false),
        ":",
        peg$literalExpectation(":", false),
        "=",
        peg$literalExpectation("=", false),
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        /^[<=]/,
        peg$classExpectation(["<", "="], false, false),
        /^[=>]/,
        peg$classExpectation(["=", ">"], false, false),
        function(rest) {return rest;},
        "~",
        peg$literalExpectation("~", false),
        /^[\n]/,
        peg$classExpectation(["\n"], false, false),
        "%",
        peg$literalExpectation("%", false),
        "...",
        peg$literalExpectation("...", false),
        peg$anyExpectation()
      ],

      peg$bytecode = [
        peg$decode("%;!/' 8!: !! )"),
        peg$decode("$;\"0#*;\"&"),
        peg$decode("%;\xC7/1#;#/($8\":!\"! )(\"'#&'#"),
        peg$decode(";W.} &;J.w &;K.q &;O.k &;T.e &;L._ &;R.Y &;Q.S &;P.M &;B.G &;C.A &;A.; &;8.5 &;$./ &;@.) &;7.# &;\xC4"),
        peg$decode("%;\x88/t#;%.\" &\"/f$;{/]$;(.\" &\"/O$;\xC4/F$;*/=$;\x8D/4$;\xC4/+$8(:\"($&%$\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9C/:#;&/1$;\x9D/($8#:##!!)(#'#(\"'#&'#"),
        peg$decode("%;'/_#$%;\x9E/,#;'/#$+\")(\"'#&'#06*%;\x9E/,#;'/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
        peg$decode("%;{/J#%;\xA1/,#;Y/#$+\")(\"'#&'#.\" &\"/)$8\":%\"\"! )(\"'#&'#"),
        peg$decode("%;\xAC/1#;)/($8\":&\"! )(\"'#&'#"),
        peg$decode("%;{/_#$%;\xAB/,#;{/#$+\")(\"'#&'#06*%;\xAB/,#;{/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
        peg$decode("$;+0#*;+&"),
        peg$decode(";,./ &;/.) &;1.# &;3"),
        peg$decode("%;\x87/`#;%.\" &\"/R$;\xC4/I$;-.\" &\"/;$;\x8D/2$;\xC4/)$8&:'&\"$\")(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;./9#$;.0#*;.&/)$8\":(\"\"! )(\"'#&'#"),
        peg$decode("%;{/S#%;\xA1/,#;Y/#$+\")(\"'#&'#.\" &\"/2$;\xC4/)$8#:)#\"\"!)(#'#(\"'#&'#"),
        peg$decode("%;\x85/`#;%.\" &\"/R$;\xC4/I$;0.\" &\"/;$;\x8D/2$;\xC4/)$8&:*&\"$\")(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;8/9#$;80#*;8&/)$8\":(\"\"! )(\"'#&'#"),
        peg$decode("%;\x84/i#;%.\" &\"/[$;\xC4/R$;2.\" &\"/D$;\xC4/;$;\x8D/2$;\xC4/)$8':+'\"%#)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;{/_#$%;\xC4/,#;{/#$+\")(\"'#&'#06*%;\xC4/,#;{/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
        peg$decode("%;\x86/Z#;\xC4/Q$;4.\" &\"/C$;\xC4/:$;\x8D/1$;\xC4/($8&:,&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;5/_#$%;\xC4/,#;5/#$+\")(\"'#&'#06*%;\xC4/,#;5/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
        peg$decode("%;{/S#%;\x9C/5#;6/,$;\x9D/#$+#)(#'#(\"'#&'#.\" &\"/)$8\":-\"\"! )(\"'#&'#"),
        peg$decode("%;Y/_#$%;\x9E/,#;Y/#$+\")(\"'#&'#06*%;\x9E/,#;Y/#$+\")(\"'#&'#&/)$8\":$\"\"! )(\"'#&'#"),
        peg$decode("%;Y/2#;\xC4/)$8\":.\"\"! )(\"'#&'#"),
        peg$decode("%;\x8B/\x89#;<.\" &\"/{$;{/r$;9.# &;:.\" &\"/^$;\xC4/U$; /L$%;\x8D/,#;\xC4/#$+\")(\"'#&'#.\" &\"/+$8':/'$%$#!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9C/0#;\x9D/'$8\":0\" )(\"'#&'#"),
        peg$decode("%;\x9C/q#;;/h$$%;\x9E/,#;;/#$+\")(\"'#&'#06*%;\x9E/,#;;/#$+\")(\"'#&'#&/2$;\x9D/)$8$:1$\"\"!)($'#(#'#(\"'#&'#"),
        peg$decode("%%;\xA0.\" &\"/,#;{/#$+\")(\"'#&'#/& 8!:2! ).. &%;\xBF/& 8!:3! )"),
        peg$decode(";=.) &;?.# &;>"),
        peg$decode("%;{/1#;\xA1/($8\":4\"!!)(\"'#&'#"),
        peg$decode("%;\xA3/9#;\xA4/0$;\xA1/'$8#:5# )(#'#(\"'#&'#"),
        peg$decode("%;\xA3/\x84#;{/{$$%;\x9E.\" &\"/,#;{/#$+\")(\"'#&'#0;*%;\x9E.\" &\"/,#;{/#$+\")(\"'#&'#&/;$;\xA4/2$;\xA1/)$8%:1%\"#\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;{/{#;\xC7/r$;x/i$$%;\xC7/,#;x/#$+\")(\"'#&'#06*%;\xC7/,#;x/#$+\")(\"'#&'#&/3$;\xC4/*$8%:6%#$\"!)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\xA3/\x97#;D/\x8E$$%;\x9E.\" &\"/,#;D/#$+\")(\"'#&'#0;*%;\x9E.\" &\"/,#;D/#$+\")(\"'#&'#&/N$;\xA4/E$;\xA1/<$;Y/3$;\xC4/*$8':7'#%$!)(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x89.# &;\x8A/H#$;{/&#0#*;{&&&#/2$;\xC4/)$8#:8#\"\"!)(#'#(\"'#&'#"),
        peg$decode("%;D/D#;\xA1/;$;Y/2$;\xC4/)$8$:9$\"#!)($'#(#'#(\"'#&'#"),
        peg$decode("%;{/9#$;E0#*;E&/)$8\"::\"\"! )(\"'#&'#"),
        peg$decode(";F./ &;G.) &;H.# &;I"),
        peg$decode("%;\xA7/1#;{/($8\":;\"! )(\"'#&'#"),
        peg$decode("%;\xA7/C#;\x9C/:$;Y/1$;\x9D/($8$:<$!!)($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9C/?#;Y.\" &\"/1$;\x9D/($8#:=#!!)(#'#(\"'#&'#"),
        peg$decode("%;\xA5/:#;Y/1$;\xA6/($8#:>#!!)(#'#(\"'#&'#"),
        peg$decode("%;\x8E/1#;\x83.\" &\"/#$+\")(\"'#&'#"),
        peg$decode("%;\x8F/1#;\x83.\" &\"/#$+\")(\"'#&'#"),
        peg$decode("%;\x90/l#;Y/c$;\xC4/Z$$;M0#*;M&/J$;N.\" &\"/<$;\x8D/3$;\xC4/*$8':?'#%#\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x91/D#;Y/;$;\xC4/2$; /)$8$:@$\"\" )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x92/:#;\xC4/1$; /($8#:A#! )(#'#(\"'#&'#"),
        peg$decode("%;\x93/V#;Y/M$;\xC4/D$; /;$;\x8D/2$;\xC4/)$8&:B&\"$\")(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x94/1#;\x83.\" &\"/#$+\")(\"'#&'#"),
        peg$decode("%;\x95/1#;Y/($8\":C\"! )(\"'#&'#"),
        peg$decode("%;\x96/[#;\xC4/R$; /I$;S.\" &\"/;$;\x8D/2$;\xC4/)$8&:D&\"#\")(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x97/I#;{.\" &\"/;$;\xC4/2$; /)$8$:E$\"\" )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x99/v#;Y/m$;\xC4/d$; /[$$;U0#*;U&/K$;V.\" &\"/=$;\x8D/4$;\xC4/+$8(:F($&$#\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9B/D#;Y/;$;\xC4/2$; /)$8$:G$\"\" )($'#(#'#(\"'#&'#"),
        peg$decode("%;\x9A/:#;\xC4/1$; /($8#:H#! )(#'#(\"'#&'#"),
        peg$decode("%;\x98/V#;X/M$;\xC4/D$; /;$;\x8D/2$;\xC4/)$8&:I&\"$\")(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;{/;#;\xA1/2$;Y/)$8#:J#\"\" )(#'#(\"'#&'#.D &%;\x9C/:#;X/1$;\x9D/($8#:K#!!)(#'#(\"'#&'#"),
        peg$decode("%;Z/' 8!:K!! )"),
        peg$decode("%;[/_#$%;\xA8/,#;[/#$+\")(\"'#&'#06*%;\xA8/,#;[/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;\\/_#$%;\xA9/,#;\\/#$+\")(\"'#&'#06*%;\xA9/,#;\\/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;]/_#$%;\xAA/,#;]/#$+\")(\"'#&'#06*%;\xAA/,#;]/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;^/_#$%;\xAB/,#;^/#$+\")(\"'#&'#06*%;\xAB/,#;^/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;_/\x9B#$%;\xAC.; &;\xAE.5 &;\xAD./ &;\xAF.) &;\xA2.# &;\xB0/,#;_/#$+\")(\"'#&'#0T*%;\xAC.; &;\xAE.5 &;\xAD./ &;\xAF.) &;\xA2.# &;\xB0/,#;_/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;`/_#$%;\x9F/,#;`/#$+\")(\"'#&'#06*%;\x9F/,#;`/#$+\")(\"'#&'#&/)$8\":M\"\"! )(\"'#&'#"),
        peg$decode("%;a/k#$%;\xB1.# &;\xB2/,#;a/#$+\")(\"'#&'#0<*%;\xB1.# &;\xB2/,#;a/#$+\")(\"'#&'#&/)$8\":N\"\"! )(\"'#&'#"),
        peg$decode("%;b/\x9B#$%;\xB9.; &;\xBA.5 &;\xBB./ &;\xBC.) &;\xBD.# &;\xBE/,#;b/#$+\")(\"'#&'#0T*%;\xB9.; &;\xBA.5 &;\xBB./ &;\xBC.) &;\xBD.# &;\xBE/,#;b/#$+\")(\"'#&'#&/)$8\":N\"\"! )(\"'#&'#"),
        peg$decode("%;\xB1.) &;\xB2.# &;\xBF/2#;b/)$8\":O\"\"! )(\"'#&'#.# &;c"),
        peg$decode("%;d/K#$;\xC0.# &;\xC2/,#0)*;\xC0.# &;\xC2&&&#/)$8\":P\"\"! )(\"'#&'#.# &;d"),
        peg$decode("%;e/k#$%;\xC3.# &;\xC1/,#;e/#$+\")(\"'#&'#0<*%;\xC3.# &;\xC1/,#;e/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode(";f.5 &;u./ &;D.) &;g.# &;h"),
        peg$decode("%;\x9C/:#;Y/1$;\x9D/($8#:Q#!!)(#'#(\"'#&'#"),
        peg$decode("%;\xA3/:#;i/1$;\xA4/($8#:R#!!)(#'#(\"'#&'#"),
        peg$decode("%;\xA5/:#;i/1$;\xA6/($8#:S#!!)(#'#(\"'#&'#"),
        peg$decode("%;j/k#$%;\x8C.# &;\x83/,#;j/#$+\")(\"'#&'#0<*%;\x8C.# &;\x83/,#;j/#$+\")(\"'#&'#&/)$8\":1\"\"! )(\"'#&'#"),
        peg$decode("%;k/k#$%;\x9E.# &;\xC7/,#;k/#$+\")(\"'#&'#0<*%;\x9E.# &;\xC7/,#;k/#$+\")(\"'#&'#&/)$8\":1\"\"! )(\"'#&'#"),
        peg$decode("%;l/' 8!:K!! )"),
        peg$decode("%;m/_#$%;\xA8/,#;m/#$+\")(\"'#&'#06*%;\xA8/,#;m/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;n/_#$%;\xA9/,#;n/#$+\")(\"'#&'#06*%;\xA9/,#;n/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;o/_#$%;\xAA/,#;o/#$+\")(\"'#&'#06*%;\xAA/,#;o/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;p/_#$%;\xAB/,#;p/#$+\")(\"'#&'#06*%;\xAB/,#;p/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;q/\x9B#$%;\xAC.; &;\xAE.5 &;\xAD./ &;\xAF.) &;\xA2.# &;\xB0/,#;q/#$+\")(\"'#&'#0T*%;\xAC.; &;\xAE.5 &;\xAD./ &;\xAF.) &;\xA2.# &;\xB0/,#;q/#$+\")(\"'#&'#&/)$8\":L\"\"! )(\"'#&'#"),
        peg$decode("%;r/_#$%;\x9F/,#;r/#$+\")(\"'#&'#06*%;\x9F/,#;r/#$+\")(\"'#&'#&/)$8\":M\"\"! )(\"'#&'#"),
        peg$decode("%;s/\x83#$%;\xB5./ &;\xB6.) &;\xB3.# &;\xB4/,#;s/#$+\")(\"'#&'#0H*%;\xB5./ &;\xB6.) &;\xB3.# &;\xB4/,#;s/#$+\")(\"'#&'#&/)$8\":T\"\"! )(\"'#&'#"),
        peg$decode("%;t/\x9B#$%;\xB9.; &;\xBA.5 &;\xBB./ &;\xBC.) &;\xBD.# &;\xBE/,#;t/#$+\")(\"'#&'#0T*%;\xB9.; &;\xBA.5 &;\xBB./ &;\xBC.) &;\xBD.# &;\xBE/,#;t/#$+\")(\"'#&'#&/)$8\":N\"\"! )(\"'#&'#"),
        peg$decode("%;\xB7.) &;\xB8.# &;\xBF/2#;t/)$8\":O\"\"! )(\"'#&'#.# &;c"),
        peg$decode("%;v.) &;\x7F.# &;\x80/' 8!:U!! )"),
        peg$decode("%;\x82/b#2V\"\"6V7W/S$;\x82.\" &\"/E$;w.\" &\"/7$4X\"\"5!7Y.\" &\"/#$+%)(%'#($'#(#'#(\"'#&'#.\xB8 &%2V\"\"6V7W/N#;\x82/E$;w.\" &\"/7$4X\"\"5!7Y.\" &\"/#$+$)($'#(#'#(\"'#&'#.w &%;\x82/@#;w/7$4X\"\"5!7Y.\" &\"/#$+#)(#'#(\"'#&'#.J &%;\x82/@#;w.\" &\"/2$4X\"\"5!7Y/#$+#)(#'#(\"'#&'#"),
        peg$decode("%4Z\"\"5!7[/@#4\\\"\"5!7].\" &\"/,$;\x82/#$+#)(#'#(\"'#&'#"),
        peg$decode("%%<;y=.##&&!&'#/I#;z/@$%$;z0#*;z&/\"!&,)/)$8#:^#\"! )(#'#(\"'#&'#"),
        peg$decode("%2_\"\"6_7`.\u0119 &2a\"\"6a7b.\u010D &2c\"\"6c7d.\u0101 &2e\"\"6e7f.\xF5 &2g\"\"6g7h.\xE9 &2i\"\"6i7j.\xDD &2k\"\"6k7l.\xD1 &2m\"\"6m7n.\xC5 &2o\"\"6o7p.\xB9 &2q\"\"6q7r.\xAD &2s\"\"6s7t.\xA1 &2u\"\"6u7v.\x95 &2w\"\"6w7x.\x89 &2y\"\"6y7z.} &2{\"\"6{7|.q &2}\"\"6}7~.e &2\x7F\"\"6\x7F7\x80.Y &2\x81\"\"6\x817\x82.M &2\x83\"\"6\x837\x84.A &2\x85\"\"6\x857\x86.5 &2\x87\"\"6\x877\x88.) &2\x89\"\"6\x897\x8A/E#$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/#$+\")(\"'#&'#"),
        peg$decode("4\x8D\"\"5!7\x8E"),
        peg$decode("%%<;~=.##&&!&'#/R#;|/I$%$;}0#*;}&/\"!&,)/2$;\xC7/)$8$:^$\"\"!)($'#(#'#(\"'#&'#"),
        peg$decode("4\x8F\"\"5!7\x90.5 &4\x91\"\"5!7\x92.) &4\x93\"\"5!7\x94"),
        peg$decode("4\x8F\"\"5!7\x90.A &4\x91\"\"5!7\x92.5 &4\x95\"\"5!7\x96.) &4\x93\"\"5!7\x94"),
        peg$decode("2\x97\"\"6\x977\x98.\u0119 &2\x99\"\"6\x997\x9A.\u010D &2\x9B\"\"6\x9B7\x9C.\u0101 &2\x9D\"\"6\x9D7\x9E.\xF5 &2\x9F\"\"6\x9F7\xA0.\xE9 &2\xA1\"\"6\xA17\xA2.\xDD &2\xA3\"\"6\xA37\xA4.\xD1 &2\xA5\"\"6\xA57\xA6.\xC5 &2\xA7\"\"6\xA77\xA8.\xB9 &2\xA9\"\"6\xA97\xAA.\xAD &2\xAB\"\"6\xAB7\xAC.\xA1 &2\xAD\"\"6\xAD7\xAE.\x95 &2\xAF\"\"6\xAF7\xB0.\x89 &2\xB1\"\"6\xB17\xB2.} &2\xB3\"\"6\xB37\xB4.q &2\xB5\"\"6\xB57\xB6.e &2\xB7\"\"6\xB77\xB8.Y &2\xB9\"\"6\xB97\xBA.M &2\xBB\"\"6\xBB7\xBC.A &2\xBD\"\"6\xBD7\xBE.5 &2\xBF\"\"6\xBF7\xC0.) &2\xC1\"\"6\xC17\xC2"),
        peg$decode("%;\x82/& 8!:\xC3! )"),
        peg$decode("%2\x83\"\"6\x837\x84/\x9C#$%%<4\xC4\"\"5!7\xC5=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#.# &;\x810N*%%<4\xC4\"\"5!7\xC5=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#.# &;\x81&/6$2\x83\"\"6\x837\x84/'$8#:\xC6# )(#'#(\"'#&'#"),
        peg$decode("2\xC7\"\"6\xC77\xC8"),
        peg$decode("%4\x95\"\"5!7\x96/\x8B#$%$4\x93\"\"5!7\x940)*4\x93\"\"5!7\x94&/2#4\x95\"\"5!7\x96/#$+\")(\"'#&'#0O*%$4\x93\"\"5!7\x940)*4\x93\"\"5!7\x94&/2#4\x95\"\"5!7\x96/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),
        peg$decode("%2\xC9\"\"6\xC97\xCA/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xCB\"\"6\xCB7\xCC.) &2\xCD\"\"6\xCD7\xCE/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xCF\"\"6\xCF7\xD0.) &2\xD1\"\"6\xD17\xD2/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xD3\"\"6\xD37\xD4.) &2\xD5\"\"6\xD57\xD6/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xD7\"\"6\xD77\xD8.) &2\xD9\"\"6\xD97\xDA/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xDB\"\"6\xDB7\xDC.) &2\x9D\"\"6\x9D7\x9E/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xDD\"\"6\xDD7\xDE.) &2\xAB\"\"6\xAB7\xAC/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xDF\"\"6\xDF7\xE0.) &2\xB3\"\"6\xB37\xB4/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xA9\"\"6\xA97\xAA/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%$4\xE1\"\"5!7\xE20)*4\xE1\"\"5!7\xE2&/N#$4\xE3\"\"5!7\xE4/,#0)*4\xE3\"\"5!7\xE4&&&#/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/G#2\xE5\"\"6\xE57\xE6.) &2\xA5\"\"6\xA57\xA6/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2\xE7\"\"6\xE77\xE8.) &2\x97\"\"6\x977\x98/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xE9\"\"6\xE97\xEA.) &2\x9F\"\"6\x9F7\xA0/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xEB\"\"6\xEB7\xEC.) &2\xBB\"\"6\xBB7\xBC/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xED\"\"6\xED7\xEE.) &2\x99\"\"6\x997\x9A/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xEF\"\"6\xEF7\xF0.) &2\xB1\"\"6\xB17\xB2/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xF1\"\"6\xF17\xF2.) &2\xC1\"\"6\xC17\xC2/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xF3\"\"6\xF37\xF4.) &2\xB9\"\"6\xB97\xBA/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xF5\"\"6\xF57\xF6.) &2\xBD\"\"6\xBD7\xBE/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xF7\"\"6\xF77\xF8.) &2\xBF\"\"6\xBF7\xC0/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xF9\"\"6\xF97\xFA.) &2\x9B\"\"6\x9B7\x9C/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xFB\"\"6\xFB7\xFC.) &2\xA7\"\"6\xA77\xA8/A#%<;}=.##&&!&'#/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2\xFD\"\"6\xFD7\xFE.) &2\xAD\"\"6\xAD7\xAE/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\xFF\"\"6\xFF7\u0100.) &2\xA1\"\"6\xA17\xA2/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0101\"\"6\u01017\u0102.) &2\xA3\"\"6\xA37\xA4/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0103\"\"6\u01037\u0104/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0105\"\"6\u01057\u0106/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0107\"\"6\u01077\u0108/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/;#2\u0109\"\"6\u01097\u010A/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2e\"\"6e7f/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/V#2\u010B\"\"6\u010B7\u010C/G$%<2\u010B\"\"6\u010B7\u010C=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2\x89\"\"6\x897\x8A/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2\u010D\"\"6\u010D7\u010E/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u010F\"\"6\u010F7\u0110/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0111\"\"6\u01117\u0112/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2\u0113\"\"6\u01137\u0114/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("2V\"\"6V7W"),
        peg$decode("%;\xC7/;#2_\"\"6_7`/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2a\"\"6a7b/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/V#2c\"\"6c7d/G$%<2c\"\"6c7d=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/V#2e\"\"6e7f/G$%<2e\"\"6e7f=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/V#2k\"\"6k7l/G$%<4\u0115\"\"5!7\u0116=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2g\"\"6g7h/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/V#2m\"\"6m7n/G$%<4\u0117\"\"5!7\u0118=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2i\"\"6i7j/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2o\"\"6o7p/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2q\"\"6q7r/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2s\"\"6s7t/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/c#%2q\"\"6q7r/E#$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/#$+\")(\"'#&'#/($8\":\u0119\"! )(\"'#&'#"),
        peg$decode("%$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/c#%2s\"\"6s7t/E#$4\x8B\"\"5!7\x8C/,#0)*4\x8B\"\"5!7\x8C&&&#/#$+\")(\"'#&'#/($8\":\u0119\"! )(\"'#&'#"),
        peg$decode("%2q\"\"6q7r/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%2s\"\"6s7t/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/2#2q\"\"6q7r/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/2#2s\"\"6s7t/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/;#2u\"\"6u7v/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2w\"\"6w7x/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2y\"\"6y7z/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2{\"\"6{7|/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2}\"\"6}7~/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/;#2\x7F\"\"6\x7F7\x80/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%;\xC7/V#2\u011A\"\"6\u011A7\u011B/G$%<2\u010B\"\"6\u010B7\u010C=.##&&!&'#/,$;\xC7/#$+$)($'#(#'#(\"'#&'#"),
        peg$decode("%2\x83\"\"6\x837\x84/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/;#2\x81\"\"6\x817\x82/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode("%2\x85\"\"6\x857\x86/,#;\xC7/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/;#2\x87\"\"6\x877\x88/,$;\xC7/#$+#)(#'#(\"'#&'#"),
        peg$decode(";\xC6.< &;\xC5.6 &%;\xC9/,#;\xC4/#$+\")(\"'#&'#"),
        peg$decode("%;\xC7/u#;\x83./ &4\u011C\"\"5!7\u011D.# &;\x9E/Z$;\xC7/Q$;\xC6.\" &\"/C$$4\xE3\"\"5!7\xE40)*4\xE3\"\"5!7\xE4&/'$8%:5% )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;\xC7/\x9F#2\u011E\"\"6\u011E7\u011F/\x90$$%%<4\xE3\"\"5!7\xE4=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#0H*%%<4\xE3\"\"5!7\xE4=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#&/6$4\xE3\"\"5!7\xE4/'$8$:5$ )($'#(#'#(\"'#&'#"),
        peg$decode("$;\xC80#*;\xC8&"),
        peg$decode("4\xE1\"\"5!7\xE2.# &;\xC9"),
        peg$decode("%2\u0120\"\"6\u01207\u0121/\x90#$%%<4\xE3\"\"5!7\xE4=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#0H*%%<4\xE3\"\"5!7\xE4=.##&&!&'#/,#;\xCB/#$+\")(\"'#&'#&/6$4\xE3\"\"5!7\xE4/'$8#:5# )(#'#(\"'#&'#"),
        peg$decode("%<;\xCB=.##&&!&'#"),
        peg$decode("1\"\"5!7\u0122")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }


    "use strict"

    // Much of this came from here:
    // http://mazko.github.io/jsjavaparser/

    function extractList(list, index) {
      var result = new Array(list.length), i;

      for (i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }

    function buildList(first, rest, index) {
      return [first].concat(extractList(rest, index));
    }

    function buildTree(first, rest, builder) {
      var result = first, i;

      for (i = 0; i < rest.length; i++) {
        result = builder(result, rest[i]);
      }

      return result;
    }

    function buildInfixExpr(first, rest, opindex = 0) {
      return buildTree(first, rest, function(result, element) {
        return {
          node:        'InfixExpression',
          operator:     element[0][opindex], // remove ending Spacing
          leftOperand:  result,
          rightOperand: element[1]
        };
      });
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
